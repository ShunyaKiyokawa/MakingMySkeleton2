#application.ymlでも同じことが可能。ここではpropertiesを使用している。並列に存在はできない
#application-localは、実行→実行の構成→引数→VM引数→-Dspring.profiles.active=local で指定
#なお、application.propertiesが最初に読まれるので

#ログの表示。logbackを使用しているのでコメントアウト。
#debug=true

#tomcatアクセスログ。logbackのrootで指定するとこの辺も出てくるのでコメントアウト
#server.port=8080
#server.tomcat.access-log-enabled=true
#server.tomcat.access-log-pattern=%h %l %u %t "%r" %s %b %D "%{User-Agent}i" %S
#server.tomcat.basedir=/tmp

# キャッシュを止める。変更したあと即反映されるようにする。F5でHTMLなどが反映されるようになる
# ただ、本番環境ではコメントアウトしたほうが無難。あくまで開発環境で便利というだけ
# ログアウト→ログインを行っても中身が復帰してしまう
spring.thymeleaf.cache= false

# 文字コード指定。springbootはデフォルトutf-8だが念のため
spring.datasource.connection-properties=useUnicode=true;characterEncoding=utf-8;

# localhostではなく、ipアドレスに切り替える。
# server.address=169.254.188.224
# ちなみにymlで書くと次な感じ
# server:
# 		address: 169.254.188.224
#

#sslに対応させる
server.ssl.enabled=true
server.port= 8443
server.ssl.key-store= localhost.p12
server.ssl.key-store-password= localhost
server.ssl.keyStoreType= PKCS12
server.ssl.keyAlias= tomcat

#あらゆる通信をsslにしないとはじくようにする
#jqueryの読み込みをhttpでやろうとしたら警告とか出るようになった記憶あり
security.require_ssl= true

#MySQLSettings
spring.datasource.url=jdbc:mysql://localhost/springbootsample
spring.datasource.username=shunya
spring.datasource.password=kiyokawa
#必ずコマンドラインからユーザーネームとパスワードでデータベースにアクセスできることを確認すること。
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
#update以外もある。updateはテーブルなかったら作り、更新あったら勝手に更新する。セキュリティを考えて随時変更


